buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

apply plugin: 'pmd'
apply plugin: 'findbugs'

/**
 * Check if BUILD_VERSION_NUMBER environment variable is defined and set it as version code.
 * This var is defined when the apk is being created by jenkins.
 *
 * @return The app versionCode: 1 when app is created locally or current jenkins version number.
 */
def getAppVersionCode(int releaseVersionCode) {
    // CASE DEV: is used a system var
    if (System.getenv('BUILD_VERSION_NUMBER') != null) {
        releaseVersionCode = Integer.valueOf(System.getenv('BUILD_VERSION_NUMBER'))
    }
    return releaseVersionCode
}

/**
 * PROJECT
 */
android {

    compileSdkVersion 27
    buildToolsVersion '27.0.3'

    useLibrary 'org.apache.http.legacy'

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 26
        applicationId "com.bamilo.android"
        versionName "2.10.1"
        versionCode getAppVersionCode(173)
        resConfigs "fa"
    }

    dexOptions {
        jumboMode = true
        javaMaxHeapSize "4G"
        maxProcessCount 4
    }

    tasks.whenTaskAdded { task ->
        if (task.name.equals("lint")) {
            task.enabled = false
        }
    }

    signingConfigs {
        release {
            storeFile file("keystores/bamilo_android.keystore")
            storePassword "bamiloandroid"
            keyAlias "bamilo_android"
            keyPassword "bamiloandroid"
        }

    }

    packagingOptions {
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE.txt'
    }

    buildTypes {
        debug {
            debuggable true
            multiDexEnabled true
        }

        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-project-pro.txt', 'proguard-project-market.txt'
        }
    }

    flavorDimensions "default"
    productFlavors {
        live {
            //### Fabric.io
            manifestPlaceholders = [crashlyticsApiKey: '93ef3db21e524147cf9702fd4dc34e7169e372d1']
            dimension "default"
        }
        staging {
            //### Fabric.io
            manifestPlaceholders = [crashlyticsApiKey: 'ddde4ad6ad210575fdac10a908040d1a93e74833']
            applicationId 'com.bamilo.android.staging'
            dimension "default"
        }
    }

    lintOptions {
        disable 'RtlSymmetry', 'IconLocation', 'IconDipSize', 'IconXmlAndPng', 'RtlHardcoded', 'InvalidPackage'
        abortOnError false
        disable 'ExtraTranslation', 'MissingTranslation'
    }

    aaptOptions {
        cruncherEnabled = false
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                //def fileNameRemoveReferences = outputFile.name.replace('JumiaApp', "App")
                output.outputFile = new File(outputFile.parent,
                        outputFile.name.replace(".apk", "-v" + defaultConfig.versionName + "(" +
                                defaultConfig.versionCode + ").apk"))
            }
        }
    }
}

dependencies {
    compile('com.crashlytics.sdk.android:crashlytics:2.9.1@aar') {
        transitive = true;
    }
    /** ############### LOCAL LIBS ############### **/
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile project(':BamiloFramework')
    /** ############### DEBUG TOOLS ############### **/
    // #MULTIDEX
    debugCompile 'com.android.support:multidex:1.0.1'
    // #STETHO :: http://facebook.github.io/stetho/
    debugCompile 'com.facebook.stetho:stetho:1.5.0'
    debugCompile 'com.facebook.stetho:stetho-okhttp:1.5.0'
    // #LEAK :: https://github.com/square/leakcanary
    //debugCompile 'com.squareup.leakcanary:leakcanary-android:1.5.4'
    // #SCAPEL :: https://github.com/JakeWharton/scalpel
    debugCompile 'com.jakewharton.scalpel:scalpel:1.1.2'
    /** Dagger 2 **/
    annotationProcessor 'com.google.dagger:dagger-android-processor:2.11'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.11'

    compile project(':BamiloCore')
}

/**
 * All flavours and build types
 */
android.applicationVariants.all { variant ->
    println "****************************"
    println "variant: ${variant.name}"
    println "flavor: ${variant.flavorName}"
    println "productFlavors: ${variant.productFlavors[0].name}"
    println "buildType: ${variant.buildType.name}"
    println "applicationId: ${variant.applicationId}"
    println "versionName: ${variant.versionName}"
    println "versionCode: ${variant.versionCode}"
    println "****************************"
}

/**
 *  PMD static analysis
 */
task pmd(type: Pmd) {
    ignoreFailures = true
    source 'src/main/java'
    include '**/*.java'
    exclude '**/gen/**'
    //ruleSets = ["java-basic", "java-strings", "java-braces"]
    ruleSetFiles = files("pmd-ruleset.xml")
    ruleSets = []
}

/**
 * Findbugs static analysis
 */
task findbugs(type: FindBugs) {
    ignoreFailures = true
    classes = fileTree('build/intermediates/classes/')
    source = fileTree('src/main/java/')
    classpath = files()
    effort = 'max'
//    shows all warnings: low, medium, high. By default is set to medium and high
//    reportLevel = "low"
    excludeFilter = file("findbugs-exclude.xml")
    reports {
        xml {
            destination "build/reports/findbugs/findbugs.xml"
        }
    }
}

/**
 * Execute cmd command printing it in console and also the result of the command.
 * @param cmd A shell command
 * @return
 */
def executeWaitAndPrintCmd(List cmd) {
    println cmd
    def proc = cmd.execute()
    proc.waitFor()
    println proc.text
}

/**
 * Calabash tests
 */
task testCalabash << {
    //testCalabash -Pcountry=NG
    //calabash-android run /home/mobile/rocket/jenkins/workspace/Jumia_Calabash_2.2_NG/AutomatedTests/pt.rocket.jumia.dev/bin/JumiaDev-debug.apk --t @Calabash_Tests country=${COUNTRY} -f json -o cucumber.json -f html -o test.html -f pretty
    executeWaitAndPrintCmd(['calabash-android', 'run', './JumiaApp/build/outputs/apk/JumiaApp-jumia-debug.apk', '--t', '@Calabash_Tests', 'country=$country'])
}

crashlytics {
    enableNdk true
    androidNdkOut 'src/main/obj'
    androidNdkLibsOut 'src/main/libs'
}
