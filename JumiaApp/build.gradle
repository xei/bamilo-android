apply plugin: 'com.android.application'
apply plugin: 'newrelic'
apply plugin: 'pmd'
apply plugin: 'findbugs'


/**
 * Check if BUILD_VERSION_NUMBER environment variable is defined and set it as version code.
 * This var is defined when the apk is being created by jenkins.
 *
 * @return The app versionCode: 1 when app is created locally or current jenkins version number.
 */
def getAppVersionCode(int releaseVersionCode) {
    // CASE DEV: is used a system var
    if (System.getenv('BUILD_VERSION_NUMBER') != null) {
        releaseVersionCode = Integer.valueOf(System.getenv('BUILD_VERSION_NUMBER'))
    }
    return releaseVersionCode
}
/**
 *
 * if version name is defined on flavour the jenkins will use that name when creating the apk on the CI server or locally.
 *
 * if version name environment variable is setted on CI server and not on the flavour, the apk locally will be build with the versionName value,
 *and on the CI server with the version name setted on the BUILD_VERSION_NAME environment variable.
 *
 * if the version name isn't setted anywhere the apk will be build both locally and on the CI server with version name setted on versionName variable.
 *
 * @return the version name
 */
def getAppVersionName() {

    def versionName = 2.4
    if (System.getenv('BUILD_VERSION_NAME') != null) {
        versionName = System.getenv('BUILD_VERSION_NAME')
    }

    return versionName
}

android {

    compileSdkVersion 21
    buildToolsVersion "21.1.2"

    defaultConfig {
        applicationId "com.mobile.view"
        minSdkVersion 9
        targetSdkVersion 21
        versionName = getAppVersionName()
        versionCode = getAppVersionCode(1)

        resConfigs "mdpi", "hdpi", "xhdpi", "xxhdpi", "xxxhdpi"
    }

    signingConfigs {

        jumiaSigning {
            storeFile file("keystores/jumia.keystore")
            storePassword "jumia123"
            keyAlias "jumia"
            keyPassword "jumia123"
        }

        jumiaBlackberrySigning {
            storeFile file("keystores/jumia_blackberry.keystore")
            storePassword "jumiablackberry"
            keyAlias "jumia_blackberry"
            keyPassword "jumiablackberry"
        }

        jumiaMtnngSigning {
            storeFile file("keystores/jumia_mtnng.keystore")
            storePassword "jumiamtnng"
            keyAlias "jumia_mtnng"
            keyPassword "jumiamtnng"
        }

        jumiaNokiaxSigning {
            storeFile file("keystores/jumia_nokiax.keystore")
            storePassword "jumianokiax"
            keyAlias "jumia_nokiax"
            keyPassword "jumianokiax"
        }

        darazSigning {
            storeFile file("keystores/daraz_android.keystore")
            storePassword "darazandroid"
            keyAlias "daraz_android"
            keyPassword "darazandroid"
        }

        shopSigning {
            storeFile file("keystores/shop_android.keystore")
            storePassword "shopandroid"
            keyAlias "shop_android"
            keyPassword "shopandroid"
        }

        bamiloSigning {
            storeFile file("keystores/bamilo_android.keystore")
            storePassword "bamiloandroid"
            keyAlias "bamilo_android"
            keyPassword "bamiloandroid"
        }

    }

    packagingOptions {
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE.txt'
    }

    buildTypes {

        debug {
            applicationIdSuffix ".dev"
            manifestPlaceholders = [ AdjustEnvironment:"sandbox" ]
            debuggable true
        }

        live {
            applicationIdSuffix ".live"
            manifestPlaceholders = [ AdjustEnvironment:"sandbox" ]
            debuggable true
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-project-live.txt'
        }

        release {
            manifestPlaceholders = [ AdjustEnvironment:"production" ]
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-project-market.txt'
        }
    }

    productFlavors {

        jumia {
            applicationId "com.jumia.android"
            versionName "2.4"
            versionCode getAppVersionCode(48)
            signingConfig signingConfigs.jumiaSigning
            resConfigs "en", "fr", "pt"
        }

        jumiaMTNng {
            versionName "2.4"
            versionCode 48
            applicationId "com.jumia.mtnng"
            signingConfig signingConfigs.jumiaMtnngSigning
            resConfigs "en", "fr", "pt"
            android.sourceSets {
                jumiaMTNng.res.srcDirs = ['src/jumia/res', 'src/jumiaMTNng/res']
            }
        }

        jumiaNokiaX {
            versionName "2.4"
            versionCode 11
            applicationId "com.jumia.nokiax"
            signingConfig signingConfigs.jumiaNokiaxSigning
            resConfigs "en", "fr", "pt"
            android.sourceSets {
                jumiaNokiaX.res.srcDirs = ['src/jumia/res', 'src/jumiaNokiaX/res']
            }
        }

        jumiaSamsung {
            versionName "2.4"
            versionCode 48
            applicationId "com.jumia.android"
            signingConfig signingConfigs.jumiaSigning
            resConfigs "en", "fr", "pt"
            android.sourceSets {
                jumiaSamsung.res.srcDirs = ['src/jumia/res', 'src/jumiaSamsung/res']
            }
        }

        jumiaBlackberry {
            versionName "2.4"
            versionCode 7
            applicationId "com.jumia.blackberry"
            signingConfig signingConfigs.jumiaBlackberrySigning
            resConfigs "en", "fr", "pt"
            android.sourceSets {
                jumiaBlackberry.res.srcDirs = ['src/jumia/res', 'src/jumiaBlackberry/res']
            }
        }

        shop {
            applicationId "com.shop.android"
            versionName "1.2"
            versionCode getAppVersionCode(4)
            signingConfig signingConfigs.shopSigning
            resConfigs "en"
        }

        daraz {
            applicationId "com.daraz.android"
            versionName "1.2"
            versionCode getAppVersionCode(4)
            signingConfig signingConfigs.darazSigning
            resConfigs "en"
        }

        bamilo {
            applicationId "com.bamilo.android"
            versionName "1.4"
            versionCode getAppVersionCode(8)
            signingConfig signingConfigs.bamiloSigning
            resConfigs "en"
        }

    }

    lintOptions {
        disable 'NewApi', 'RtlSymmetry', 'IconLocation', 'IconDipSize', 'IconXmlAndPng', 'RtlHardcoded'
        abortOnError false
    }

}

dependencies {
    /** LOCAL LIBS **/
    compile project(':libraries:com.mobile.framework')

    compile 'com.google.android.support:wearable:1.1.0'
    compile 'com.google.android.gms:play-services-wearable:6.5.87'
//    wearApp project(':JumiaWear')

    compile fileTree(dir: 'libs', include: ['*.jar'])

    /**Comment this for the BB release **/
    jumiaWearApp project(path: ':JumiaWear', configuration: 'jumiaRelease')
    bamiloWearApp project(path: ':JumiaWear', configuration: 'bamiloRelease')
    shopWearApp project(path: ':JumiaWear', configuration: 'shopRelease')
    darazWearApp project(path: ':JumiaWear', configuration: 'darazRelease')
    jumiaMTNngWearApp project(path: ':JumiaWear', configuration: 'mtnRelease')

}


/** SET CUSTOM APPLICATION IDS DEPENDING ON FLAVOURS AND BUILD TYPE **/
android.applicationVariants.all { variant ->
    println "****************************"
    println "variant: ${variant.name}"
    println "flavor: ${variant.flavorName}"
    println "productFlavors: ${variant.productFlavors[0].name}"
    println "buildType: ${variant.buildType.name}"
    println "applicationId: ${variant.applicationId}"
    println "versionName: ${variant.versionName}"
    println "versionCode: ${variant.versionCode}"
    println "****************************"

    /**
     * Set application id with "com." + venture + "blackberry" or "android"(when not in debug build type)  + "dev" when in debug build type
     */

    /*
    def String venture = variant.productFlavors[0].name
    def boolean isInstall = false;
    variant.mergedFlavor.applicationId = "com." + venture + "." + variant.productFlavors[0].name
    println "application ID: ${variant.mergedFlavor.applicationId}"
        //e.g. com.jumia.android
        def String install = "";
        if(variant.productFlavors[0].name == "jumia_mtnng" ){
            install = "mtnng";
            isInstall = true;
        } else if (variant.productFlavors[0].name == "jumia_nokiax"){
            install = "nokiax";
            isInstall = true;
        }
        if(isInstall){
            variant.mergedFlavor.applicationId = "com." + venture + "." + install
            //e.g. com.jumia.nokiax
            //e.g. com.jumia.mtnng
            println "application ID: ${variant.mergedFlavor.applicationId}"
        }
    if (!isInstall && variant.buildType.name == android.buildTypes.debug.name) {
        variant.mergedFlavor.applicationId = variant.mergedFlavor.applicationId + ".dev"
        println "DEV application ID: ${variant.mergedFlavor.applicationId}"
        //e.g. com.jumia.android.dev
    } else if(!isInstall && variant.buildType.name == android.buildTypes.live.name){
        variant.mergedFlavor.applicationId = variant.mergedFlavor.applicationId + ".live"
        println "LIVE application ID: ${variant.mergedFlavor.applicationId}"
        //e.g. com.jumia.android.live
    }
    */
}


/**
 *  PMD static analysis
 */
task pmd(type: Pmd) {
    ignoreFailures = true
    source 'src/main/java'
    include '**/*.java'
    exclude '**/gen/**'
    //ruleSets = ["java-basic", "java-strings", "java-braces"]
    ruleSetFiles = files("pmd-ruleset.xml")
    ruleSets = []

}

/**
 * Findbugs static analysis
 */
task findbugs(type: FindBugs) {
    ignoreFailures = true
    classes = fileTree('build/intermediates/classes/')
    source = fileTree('src/main/java/')
    classpath = files()
    effort = 'max'
//    shows all warnings: low, medium, high. By default is set to medium and high
//    reportLevel = "low"
    excludeFilter = file("findbugs-exclude.xml")
    reports {
        xml {
            destination "build/reports/findbugs/findbugs.xml"
        }
    }
}