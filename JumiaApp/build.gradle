apply plugin: 'com.android.application'
apply plugin: 'newrelic'
apply plugin: 'pmd'
apply plugin: 'findbugs'


/**
 * Check if BUILD_VERSION_NUMBER environment variable is defined and set it as version code.
 * This var is defined when the apk is being created by jenkins.
 *
 * @return The app versionCode: 1 when app is created locally or current jenkins version number.
 */
def getAppVersionCode(int releaseVersionCode) {
    // CASE DEV: is used a system var
    if (System.getenv('BUILD_VERSION_NUMBER') != null) {
        releaseVersionCode = Integer.valueOf(System.getenv('BUILD_VERSION_NUMBER'))
    }
    return releaseVersionCode
}

/**
 * PROJECT
 */
android {

    compileSdkVersion 23
    buildToolsVersion '23.0.1'

    useLibrary 'org.apache.http.legacy'

    dexOptions {
        jumboMode true
    }

    defaultConfig {
        applicationId "com.mobile.view"
        minSdkVersion 15
        targetSdkVersion 22
        resConfigs "mdpi", "hdpi", "xhdpi", "xxhdpi", "xxxhdpi"
    }

    signingConfigs {

        jumiaSigning {
            storeFile file("keystores/jumia.keystore")
            storePassword "jumia123"
            keyAlias "jumia"
            keyPassword "jumia123"
        }

        jumiaBlackberrySigning {
            storeFile file("keystores/jumia_blackberry.keystore")
            storePassword "jumiablackberry"
            keyAlias "jumia_blackberry"
            keyPassword "jumiablackberry"
        }

        jumiaMtnngSigning {
            storeFile file("keystores/jumia_mtnng.keystore")
            storePassword "jumiamtnng"
            keyAlias "jumia_mtnng"
            keyPassword "jumiamtnng"
        }

        darazSigning {
            storeFile file("keystores/daraz_android.keystore")
            storePassword "darazandroid"
            keyAlias "daraz_android"
            keyPassword "darazandroid"
        }

        shopSigning {
            storeFile file("keystores/shop_android.keystore")
            storePassword "shopandroid"
            keyAlias "shop_android"
            keyPassword "shopandroid"
        }

        bamiloSigning {
            storeFile file("keystores/bamilo_android.keystore")
            storePassword "bamiloandroid"
            keyAlias "bamilo_android"
            keyPassword "bamiloandroid"
        }

    }

    packagingOptions {
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE.txt'
    }

    buildTypes {
        debug {
            applicationIdSuffix ".dev"
            debuggable true
        }
        live {
            applicationIdSuffix ".live"
            debuggable true
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-project-live.txt'
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-project-market.txt'
        }
    }

    productFlavors {

        /**
         * #################### JUMIA ####################
         */
        jumia {
            applicationId "com.jumia.android"
            versionName "2.8"
            versionCode getAppVersionCode(56)
            signingConfig signingConfigs.jumiaSigning
            resConfigs "en", "fr", "ar"
        }

        jumiaPreInstall {
            applicationId "com.jumia.android"
            versionName "2.8"
            versionCode 56
            signingConfig signingConfigs.jumiaSigning
            resConfigs "en", "fr", "ar"
            android.sourceSets {
                jumiaPreInstall.res.srcDirs = ['src/jumia/res', 'src/jumiaRelease/res', 'src/jumiaPreInstall/res']
            }
        }

        jumiaMTNng {
            applicationId "com.jumia.mtnng"
            versionName "2.8"
            versionCode 58
            signingConfig signingConfigs.jumiaMtnngSigning
            resConfigs "en", "fr", "ar"
            android.sourceSets {
                jumiaMTNng.res.srcDirs = ['src/jumia/res', 'src/jumiaMTNng/res']
            }
        }

        jumiaBlackberry {
            applicationId "com.jumia.blackberry"
            versionName "2.8"
            versionCode 12
            signingConfig signingConfigs.jumiaBlackberrySigning
            resConfigs "en", "fr", "ar"
            android.sourceSets {
                jumiaBlackberry.res.srcDirs = ['src/jumia/res', 'src/jumiaBlackberry/res']
            }
        }

        /**
         * #################### SHOP ####################
         */
        shop {
            applicationId "com.shop.android"
            versionName "1.6"
            versionCode getAppVersionCode(10)
            signingConfig signingConfigs.shopSigning
            resConfigs "my"
        }

        shopPreInstall {
            applicationId "com.shop.android"
            versionName "1.6"
            versionCode 10
            signingConfig signingConfigs.shopSigning
            resConfigs "my"
            android.sourceSets {
                shopPreInstall.res.srcDirs = ['src/shop/res', 'src/shopRelease/res', 'src/shopPreInstall/res']
            }
        }

        /**
         * #################### DARAZ ####################
         */
        daraz {
            applicationId "com.daraz.android"
            versionName "1.6"
            versionCode getAppVersionCode(11)
            signingConfig signingConfigs.darazSigning
            resConfigs "en", "ur"
        }

        darazPreInstall {
            applicationId "com.daraz.android"
            versionName "1.6"
            versionCode 11
            signingConfig signingConfigs.darazSigning
            resConfigs "en", "ur"
            android.sourceSets {
                darazPreInstall.res.srcDirs = ['src/daraz/res', 'src/darazRelease/res', 'src/darazPreInstall/res']
            }
        }

        /**
         * #################### BAMILO ####################
         */
        bamilo {
            applicationId "com.bamilo.android"
            versionName "1.8"
            versionCode getAppVersionCode(13)
            signingConfig signingConfigs.bamiloSigning
            resConfigs "fa"
        }

    }

    lintOptions {
        disable 'NewApi', 'RtlSymmetry', 'IconLocation', 'IconDipSize', 'IconXmlAndPng', 'RtlHardcoded'
        abortOnError false
        disable 'ExtraTranslation','MissingTranslation'
    }

}

dependencies {
    /** LOCAL LIBS **/
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile project(':libraries:com.mobile.framework')
    /** Android wear releases **/
    jumiaWearApp project(path: ':JumiaWear', configuration: 'jumiaRelease')
    jumiaPreInstallWearApp project(path: ':JumiaWear', configuration: 'jumiaRelease')
    jumiaMTNngWearApp project(path: ':JumiaWear', configuration: 'mtnRelease')
    bamiloWearApp project(path: ':JumiaWear', configuration: 'bamiloRelease')
    shopWearApp project(path: ':JumiaWear', configuration: 'shopRelease')
    shopPreInstallWearApp project(path: ':JumiaWear', configuration: 'shopRelease')
    darazWearApp project(path: ':JumiaWear', configuration: 'darazRelease')
    darazPreInstallWearApp project(path: ':JumiaWear', configuration: 'darazRelease')
}

/**
 * All flavours and build types
 */
android.applicationVariants.all { variant ->
    println "****************************"
    println "variant: ${variant.name}"
    println "flavor: ${variant.flavorName}"
    println "productFlavors: ${variant.productFlavors[0].name}"
    println "buildType: ${variant.buildType.name}"
    println "applicationId: ${variant.applicationId}"
    println "versionName: ${variant.versionName}"
    println "versionCode: ${variant.versionCode}"
    println "****************************"
}

/**
 * Validate all translations
 */
task translationsValidation << {
    executeWaitAndPrintCmd(['ruby', 'JumiaApp/scripts/validate_str_placeholders.rb'])
}

/**
 *  PMD static analysis
 */
task pmd(type: Pmd) {
    ignoreFailures = true
    source 'src/main/java'
    include '**/*.java'
    exclude '**/gen/**'
    //ruleSets = ["java-basic", "java-strings", "java-braces"]
    ruleSetFiles = files("pmd-ruleset.xml")
    ruleSets = []
}

/**
 * Findbugs static analysis
 */
task findbugs(type: FindBugs) {
    ignoreFailures = true
    classes = fileTree('build/intermediates/classes/')
    source = fileTree('src/main/java/')
    classpath = files()
    effort = 'max'
//    shows all warnings: low, medium, high. By default is set to medium and high
//    reportLevel = "low"
    excludeFilter = file("findbugs-exclude.xml")
    reports {
        xml {
            destination "build/reports/findbugs/findbugs.xml"
        }
    }
}

/**
 * Execute cmd command printing it in console and also the result of the command.
 * @param cmd A shell command
 * @return
 */
def executeWaitAndPrintCmd(List cmd) {
    println cmd
    def proc = cmd.execute()
    proc.waitFor()
    println proc.text
}

/**
 * Calabash tests
 */
task testCalabash << {
    //testCalabash -Pcountry=NG
    //calabash-android run /home/mobile/rocket/jenkins/workspace/Jumia_Calabash_2.2_NG/AutomatedTests/pt.rocket.jumia.dev/bin/JumiaDev-debug.apk --t @Calabash_Tests country=${COUNTRY} -f json -o cucumber.json -f html -o test.html -f pretty
    executeWaitAndPrintCmd(['calabash-android', 'run', './JumiaApp/build/outputs/apk/JumiaApp-jumia-debug.apk', '--t', '@Calabash_Tests', 'country=$country'])
}
