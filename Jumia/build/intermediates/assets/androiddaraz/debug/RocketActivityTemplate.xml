<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="false" context="java" deleted="false" description="A Rocket Template for Activity that extends MyActivity and implements IEventListenerr" enabled="true" name="RocketActivity">package ${enclosing_package};

import android.app.Activity;
import android.content.Context;
import android.content.res.Configuration;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.view.LayoutInflater;
import com.mobile.utils.InflateLayout;
import com.mobile.utils.MyActivity;
import com.mobile.utils.PersistentData;
import com.mobile.framework.R;
import com.mobile.components.AlertMessagesComponent;
import com.mobile.components.lazylist.ImageLoader;
import com.mobile.framework.event.EventManager;
import com.mobile.framework.event.EventType;
import com.mobile.framework.event.IEvent;
import com.mobile.framework.event.IEventListener;
import com.flurry.android.FlurryAgent;


/**
*
* Copyright (C) ${year} Rocket Internet - All Rights Reserved
*
* Unauthorized copying of this file, via any medium is strictly prohibited
* Proprietary and confidential. 
* Written by ${user}, ${date}. 
*
* @project ${enclosing_project}
*
* @version 1.01
*
* @author ${user}
*
* @modified ${user}
*
* @date ${date}
*
* @description 
*		// TODO - Description
*
*/
public class ${primary_type_name} extends MyActivity implements IEventListener{

	protected final String TAG = "${primary_type_name}";

	private int currentOrientation = Configuration.ORIENTATION_PORTRAIT;

	private Handler handleComponent;

	private Context context;

	private Activity activity;

	private LayoutInflater inflater;

	private ImageLoader imageLoader;
	
	/*
	 * ####################### 
	 * # Activity Life Cycle # 
	 * #######################
	 */
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		// Get Aplication Context
		setContentView(R.layout.main);
		// Get Context
		context = getApplicationContext();
		// Save this
		activity = this;
		// Inflate
		inflater = (LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE);
		// Get Persist Data
		persistentData = PersistentData.getSingleton();
		// Create Image Loader
		imageLoader = new ImageLoader(context, persistentData.getDefaultImage());
		
		// Inflate This Layout
		setAppContentLayout();
		
		// Set Result Handle
		setHandleComponent();

		// TODO: Add here onCreate code
	}

	public void onStart() {
		super.onStart();
		// Flurry Analytics
		FlurryAgent.onStartSession(this, getString(R.string.fkey));
		// XXX - FlurryAgent.logEvent(getString(R.string.fbrands)+"_"+getString(R.string.fload));
		FlurryAgent.onPageView();

		// TODO: Add here onStart code
	}
	
	public void onStop() {
		super.onStop();
		// Flurry Analytics
		FlurryAgent.onEndSession(this);

		// TODO: Add here onStop code
	}
	
	public void onResume() {
		super.onResume();
		onOrientationChanged(getResources().getConfiguration().orientation);
		// TODO: Add here onResume code
	}

	public void onPause() {
		super.onPause();
		// TODO: Add here onPause code
	}

	@Override
	public void onConfigurationChanged(Configuration newConfig) {
	    super.onConfigurationChanged(newConfig);
	    onOrientationChanged(newConfig.orientation);
	}


	/*
	 * ###################### 
	 * # Screen Orientation # 
	 * ######################
	 */
	/**
	 * Validate Screen Orientation
	 * @param orientation
	 */
	private void onOrientationChanged(int orientation){
        switch (orientation) {
        case Configuration.ORIENTATION_PORTRAIT:
        	currentOrientation = Configuration.ORIENTATION_PORTRAIT;
            break;
        case Configuration.ORIENTATION_LANDSCAPE:
        	currentOrientation = Configuration.ORIENTATION_LANDSCAPE;
            break;
        default:
			break;
        }
	}

	// TODO: Add here orientation functions


	/*
	 * #################
	 * # Intent Extras # 
	 * #################
	 */
	// TODO: Add here new functions


	/*
	 * ################### 
	 * # Activity Layout # 
	 * ###################
	 */
	/**
	 * Set the Home Page Layout
	 */
	private void setAppContentLayout() {
		InflateLayout.inflate(this, R.id.rocket_app_content, R.layout.configurator_module);
	}

	// TODO: Add here new layout functions


	/*
	 * ################# 
	 * # Darwin Access # 
	 * #################
	 */
	/**
	 * Add Event Listener
	 * @param EventType
	 */
	private void addEventListener(EventType eventType){
		EventManager.getSingleton().AddEventListener(eventType, this);
	}
	
	/**
	 * Remove Event Listener
	 * @param EventType
	 */
	private void removeEventListener(EventType eventType){
		EventManager.getSingleton().RemoveEventListener(eventType, this);
	}

	/**
	 * Get Data From Framework
	 * @param IEvent
	 */
	private void getDataFromFramework(IEvent event) {
		try {
			EventManager.getSingleton().triggerEvent(event);
		} catch (NullPointerException e) {
			AlertMessagesComponent.informationAlertMessage(activity, "Information:", "Service unavailable. Please try again.", "Ok", handleComponent);
		}
		
	}

	// TODO: Add here new functions


	/*
	 * ####################### 
	 * # Activity Functions # 
	 * #######################
	 */
	// TODO: Add here new functions for this


	/*
	 * ################## 
	 * # Result Handler # 
	 * ##################
	 */
	/**
	 * Result Handle used for all Components
	 */
	private void setHandleComponent() {
		handleComponent = new Handler() {
			@Override
			public void handleMessage(Message msg) {
				if (msg != null) {
					switch (msg.what) {
					
					// TODO: Add here event filters
					
					default:
						break;
					}
				}
			}
		};
	}
	
	/**
	 * Result Handle used for drawin
	 */
	public void handleEvent(IEvent event) {
		switch (event.getType()) {
		
		// TODO: Add here event filters
		
		default:
			break;
		}
	}

	// TODO: Add here new handle functions
}
</template></templates>